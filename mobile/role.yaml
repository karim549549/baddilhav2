# Baddilha - Dating App Project Context

## Project Overview
**Baddilha** is a React Native dating application built with Expo, featuring a Tinder-like interface with card swiping functionality. The app is designed to be a modern, mobile-first dating platform with a focus on user experience and smooth interactions.

## Tech Stack
- **Framework**: React Native 0.79.6 with Expo SDK 53
- **Language**: TypeScript 5.8.3
- **Navigation**: Expo Router v5 with file-based routing
- **Styling**: NativeWind (Tailwind CSS for React Native)
- **State Management**: React hooks (useState, useEffect)
- **UI Components**: Custom components with Expo vector icons
- **Animations**: React Native Reanimated, React Native Gesture Handler
- **Build Tools**: Metro bundler, Babel, ESLint

## Project Structure

### Core Directories
```
baddilha/
â”œâ”€â”€ app/                    # Main application code (Expo Router)
â”‚   â”œâ”€â”€ (auth)/            # Authentication routes
â”‚   â”œâ”€â”€ (tabs)/            # Main tab navigation
â”‚   â”œâ”€â”€ _layout.tsx        # Root layout with auth logic
â”‚   â””â”€â”€ globals.css        # Global styles
â”œâ”€â”€ components/             # Reusable UI components
â”œâ”€â”€ utils/                  # Utility functions and constants
â”œâ”€â”€ assets/                 # Images, fonts, and static resources
â””â”€â”€ node_modules/           # Dependencies
```

### Key Files
- **package.json**: Project dependencies and scripts
- **app.json**: Expo configuration and app metadata
- **tailwind.config.js**: NativeWind/Tailwind configuration
- **tsconfig.json**: TypeScript configuration
- **metro.config.js**: Metro bundler configuration

## Application Architecture

### Authentication Flow
- **Loading Screen**: 3-second splash screen with animation
- **Auth Check**: Simulated authentication state (currently hardcoded)
- **Routing**: Conditional navigation based on auth status
  - Unauthenticated â†’ `/login`
  - Authenticated â†’ `/(tabs)`

### Navigation Structure
The app uses Expo Router with a tab-based navigation system:

1. **Home** (`/`) - Main swiping interface with card deck
2. **Explore** (`/explore`) - Search/discovery functionality
3. **Likes** (`/likes`) - User's liked profiles
4. **Chat** (`/chat`) - Messaging interface
5. **Profile** (`/profile`) - User profile management

### Core Components

#### SwiperCard
- Displays user profiles as swipeable cards
- Uses placeholder images with overlay text
- Supports left/right swipe gestures
- Customizable overlay labels (NOPE/LIKE)

#### LoadingScreen
- Animated loading interface
- Handles app initialization
- Smooth transitions between states

#### Authentication Screens
- **Login**: Apple, Google, and phone number authentication options
- **Create Account**: User registration (placeholder)
- **Layout**: Auth-specific navigation structure

## Styling & Design

### Color Scheme
- **Primary Gradient**: #FD297B â†’ #FF5864 â†’ #FF655B (Tinder-inspired pink/red)
- **UI Colors**: White, gray, black for contrast
- **Accent Colors**: Red (NOPE), Green (LIKE)

### Design System
- **Typography**: Bold, modern fonts with clear hierarchy
- **Spacing**: Consistent padding and margins using Tailwind classes
- **Icons**: Expo Vector Icons (Ionicons, FontAwesome, AntDesign)
- **Layout**: Responsive design with safe area handling

## Features & Functionality

### Current Implementation
- âœ… Card swiping interface with gesture handling
- âœ… Tab-based navigation
- âœ… Authentication flow (simulated)
- âœ… Loading and splash screens
- âœ… Responsive design with NativeWind

### Planned/Placeholder Features
- ðŸ”„ User profile management
- ðŸ”„ Chat/messaging system
- ðŸ”„ Explore/search functionality
- ðŸ”„ Like/matching system
- ðŸ”„ Real authentication integration

## Development Workflow

### Scripts
- `npm start`: Start Expo development server
- `npm run android`: Run on Android emulator
- `npm run ios`: Run on iOS simulator
- `npm run web`: Run web version
- `npm run reset-project`: Reset to blank project state

### Development Tools
- **ESLint**: Code quality and consistency
- **Prettier**: Code formatting (with Tailwind plugin)
- **TypeScript**: Type safety and development experience
- **Hot Reload**: Fast development iteration

## Dependencies

### Core Dependencies
- **React Native**: Mobile app framework
- **Expo**: Development platform and tools
- **Expo Router**: File-based routing solution
- **NativeWind**: Tailwind CSS for React Native
- **React Native Reanimated**: Smooth animations
- **React Native Gesture Handler**: Touch interactions

### UI & UX Libraries
- **Expo Vector Icons**: Icon library
- **Expo Linear Gradient**: Gradient backgrounds
- **Expo Blur**: Blur effects
- **React Native Deck Swiper**: Card swiping component

## Configuration Details

### Expo Configuration
- **Platforms**: iOS, Android, Web
- **Orientation**: Portrait mode
- **Architecture**: New architecture enabled
- **Experiments**: Typed routes enabled

### Tailwind/NativeWind
- **Content Paths**: `./app/**/*.{js,jsx,ts,tsx}`, `./components/**/*.{js,jsx,ts,tsx}`
- **Custom Colors**: Gradient color palette defined
- **Preset**: NativeWind preset for React Native compatibility

## Current State & Next Steps

### What's Working
- Basic app structure and navigation
- Card swiping interface
- Authentication flow (simulated)
- Responsive design system

### Areas for Development
1. **Real Authentication**: Integrate actual auth providers
2. **User Profiles**: Complete profile management system
3. **Matching Logic**: Implement actual matching algorithm
4. **Chat System**: Real-time messaging functionality
5. **Data Management**: Backend integration and state management
6. **Testing**: Unit and integration tests
7. **Performance**: Optimization and caching

### Technical Debt
- Hardcoded authentication state
- Placeholder data and images
- Basic error handling
- Limited accessibility features

## Notes for Developers
- The app uses modern React Native patterns with hooks
- File-based routing makes navigation intuitive
- NativeWind provides consistent styling across platforms
- The project is set up for rapid development and iteration
- Consider implementing proper state management (Redux, Zustand) for larger scale
- Add proper error boundaries and loading states
- Implement proper TypeScript interfaces for all data structures 